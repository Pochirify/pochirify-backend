# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# scalars
enum PaymentMethod {
  CARD
  PAYPAY
  APPLE_PAY
  GOOGLE_PAY
}
# TODO: define Uint32

type ProductVariant {
  id: Int!
  title: String!
  unitPrice: Int!
  contents: [String!]!
  imageURL: String!
}

type VariantGroup {
  id: String!
  title: String!
  imageURLs: [String!]!
  deliveryTimeRange: DeliveryTimeRange!
  faqImageURL: String!
  descriptionImageURL: String!
  badgeImageURL: String!
}

type DeliveryTimeRange {
  # (ex) 12/23
  from: String!
  to: String!
}

# query types
type VariantGroupDetail {
  variantGroup: VariantGroup!
  variants: [ProductVariant!]!
}

type AllActiveVariantGroupIDs {
  ids: [String!]!
}

type Query {
  variantGroupDetail(id: String!): VariantGroupDetail!
  allActiveVariantGroupIDs: AllActiveVariantGroupIDs!
}

# input
input createOrderInput {
  productVariantID: Int!
  quantity: Int!
  paymentMethod: PaymentMethod!
  redirectURL: String
  phoneNumber: String!

  emailAddress: String!
  zipCode: Int!
  prefecture: String!
  city: String!
  streetAddress: String!
  building: String
  lastName: String!
  firstName: String!
}

# mutation payload
type createOrderPayload {
  order: createOrderPayloadOrder
}

type createOrderPayloadOrder {
  orderID: String!
  totalPrice: Int!
  orderResult: orderResult!
}

type completeOrderPayload {
  shopifyActivationURL: String
  isNotOrderCompleted: Boolean! # TODO: UserErrorとして定義するべき？
}

type paypayOrderResult {
  url: String!
}

type creditCardResult {
  cardOrderID: String!
  accessID: String!
}

union orderResult = paypayOrderResult | creditCardResult

type Mutation {
  createOrder(input: createOrderInput!): createOrderPayload!
  completeOrder(id: String!): completeOrderPayload!
}
