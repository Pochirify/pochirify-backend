# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# scalars
scalar EmailAddress
scalar PhoneNumber

# general types
type Todo {
  id: ID!
  text: String!
  done: Boolean!
  # userはこの上のtodo typeのresolverを使用する（query resolverではなく）ことを強制。Todo resolverではuserを取らないべき。そうすることで、欲しいときだけuserを読んで、無駄なdbアクセスを減らすことができる。
  user: User! @goField(forceResolver: true)
}

type User {
  id: ID!
  name: String!
  todo: Todo @goField(forceResolver: true)
}

type Product {
  id: ID!
  title: String!
  price: Int!
  contents: [String!]!
  imageURL: String!
}

type VariantGroup {
  id: ID!
  title: String!
  imageURLs: [String!]!
  deliveryTimeRange: DeliveryTimeRange!
  faqImageURL: WebpPngImageURL!
  descriptionImageURL: WebpPngImageURL!
  badgeImageURL: String!
}

type DeliveryTimeRange {
  # (ex) 12/23
  from: String!
  to: String!
}

type WebpPngImageURL {
  webpURL: String!
  pngURL: String!
}

# query types

type VariantGroupDetail {
  variantGroup: VariantGroup!
  variants: [Product!]!
}

type AllActiveVariantGroupIDs {
  ids: [String!]!
}

# type ProductDetail {
#   product: Product!
#   variants: [Product!]
# }

# type AllActiveProductIDs {
#   ids: [String!]!
# }

type Query {
  todos: [Todo!]!
  users: [User!]!
  variantGroupDetail(id: String!): VariantGroupDetail!
  allActiveVariantGroupIDs: AllActiveVariantGroupIDs!
  # productDetail(id: String!): ProductDetail!
  # allActiveProductIDs: AllActiveProductIDs!
}

# input types

input NewTodo {
  text: String!
  userId: String!
}

input NewUser {
  id: ID
  name: String!
}

input PaypayQRCodeInput {
  emailAddress: EmailAddress!
  phoneNumber: PhoneNumber!
  address: AddressInput!
  amount: Int!
  orderDescription: String!
}

input AddressInput {
  zip: String!
  prefecture: String!
  addressOne: String!
  addressTwo: String
}

# mutation types

type createPaypayQRCodePayload {
  url: String!
  deepLink: String!
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
  createUser(input: NewUser!): User!
  createPaypayQRCode(input: PaypayQRCodeInput!): createPaypayQRCodePayload!
}
