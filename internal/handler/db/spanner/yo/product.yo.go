// Code generated by yo. DO NOT EDIT.
// Package yo contains the types.
package yo

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// Product represents a row from 'Products'.
type Product struct {
	ID               string             `spanner:"ID" json:"ID"`                             // ID
	Title            string             `spanner:"Title" json:"Title"`                       // Title
	Price            int64              `spanner:"Price" json:"Price"`                       // Price
	Stock            int64              `spanner:"Stock" json:"Stock"`                       // Stock
	ContentOne       string             `spanner:"ContentOne" json:"ContentOne"`             // ContentOne
	ContentTwo       spanner.NullString `spanner:"ContentTwo" json:"ContentTwo"`             // ContentTwo
	ContentThree     spanner.NullString `spanner:"ContentThree" json:"ContentThree"`         // ContentThree
	ContentFour      spanner.NullString `spanner:"ContentFour" json:"ContentFour"`           // ContentFour
	ContentFive      spanner.NullString `spanner:"ContentFive" json:"ContentFive"`           // ContentFive
	ProductVariantID spanner.NullString `spanner:"ProductVariantID" json:"ProductVariantID"` // ProductVariantID
	CreateTime       time.Time          `spanner:"CreateTime" json:"CreateTime"`             // CreateTime
	UpdateTime       time.Time          `spanner:"UpdateTime" json:"UpdateTime"`             // UpdateTime
}

func ProductPrimaryKeys() []string {
	return []string{
		"ID",
	}
}

func ProductColumns() []string {
	return []string{
		"ID",
		"Title",
		"Price",
		"Stock",
		"ContentOne",
		"ContentTwo",
		"ContentThree",
		"ContentFour",
		"ContentFive",
		"ProductVariantID",
		"CreateTime",
		"UpdateTime",
	}
}

func ProductWritableColumns() []string {
	return []string{
		"ID",
		"Title",
		"Price",
		"Stock",
		"ContentOne",
		"ContentTwo",
		"ContentThree",
		"ContentFour",
		"ContentFive",
		"ProductVariantID",
		"CreateTime",
		"UpdateTime",
	}
}

func (p *Product) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "ID":
			ret = append(ret, &p.ID)
		case "Title":
			ret = append(ret, &p.Title)
		case "Price":
			ret = append(ret, &p.Price)
		case "Stock":
			ret = append(ret, &p.Stock)
		case "ContentOne":
			ret = append(ret, &p.ContentOne)
		case "ContentTwo":
			ret = append(ret, &p.ContentTwo)
		case "ContentThree":
			ret = append(ret, &p.ContentThree)
		case "ContentFour":
			ret = append(ret, &p.ContentFour)
		case "ContentFive":
			ret = append(ret, &p.ContentFive)
		case "ProductVariantID":
			ret = append(ret, &p.ProductVariantID)
		case "CreateTime":
			ret = append(ret, &p.CreateTime)
		case "UpdateTime":
			ret = append(ret, &p.UpdateTime)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (p *Product) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "ID":
			ret = append(ret, p.ID)
		case "Title":
			ret = append(ret, p.Title)
		case "Price":
			ret = append(ret, p.Price)
		case "Stock":
			ret = append(ret, p.Stock)
		case "ContentOne":
			ret = append(ret, p.ContentOne)
		case "ContentTwo":
			ret = append(ret, p.ContentTwo)
		case "ContentThree":
			ret = append(ret, p.ContentThree)
		case "ContentFour":
			ret = append(ret, p.ContentFour)
		case "ContentFive":
			ret = append(ret, p.ContentFive)
		case "ProductVariantID":
			ret = append(ret, p.ProductVariantID)
		case "CreateTime":
			ret = append(ret, p.CreateTime)
		case "UpdateTime":
			ret = append(ret, p.UpdateTime)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newProduct_Decoder returns a decoder which reads a row from *spanner.Row
// into Product. The decoder is not goroutine-safe. Don't use it concurrently.
func newProduct_Decoder(cols []string) func(*spanner.Row) (*Product, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*Product, error) {
		var p Product
		ptrs, err := p.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &p, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (p *Product) Insert(ctx context.Context) *spanner.Mutation {
	values, _ := p.columnsToValues(ProductWritableColumns())
	return spanner.Insert("Products", ProductWritableColumns(), values)
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (p *Product) Update(ctx context.Context) *spanner.Mutation {
	values, _ := p.columnsToValues(ProductWritableColumns())
	return spanner.Update("Products", ProductWritableColumns(), values)
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (p *Product) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	values, _ := p.columnsToValues(ProductWritableColumns())
	return spanner.InsertOrUpdate("Products", ProductWritableColumns(), values)
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (p *Product) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, ProductPrimaryKeys()...)

	values, err := p.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "Product.UpdateColumns", "Products", err)
	}

	return spanner.Update("Products", colsWithPKeys, values), nil
}

// FindProduct gets a Product by primary key
func FindProduct(ctx context.Context, db YORODB, id string) (*Product, error) {
	key := spanner.Key{id}
	row, err := db.ReadRow(ctx, "Products", key, ProductColumns())
	if err != nil {
		return nil, newError("FindProduct", "Products", err)
	}

	decoder := newProduct_Decoder(ProductColumns())
	p, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindProduct", "Products", err)
	}

	return p, nil
}

// ReadProduct retrieves multiples rows from Product by KeySet as a slice.
func ReadProduct(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*Product, error) {
	var res []*Product

	decoder := newProduct_Decoder(ProductColumns())

	rows := db.Read(ctx, "Products", keys, ProductColumns())
	err := rows.Do(func(row *spanner.Row) error {
		p, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, p)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadProduct", "Products", err)
	}

	return res, nil
}

// Delete deletes the Product from the database.
func (p *Product) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := p.columnsToValues(ProductPrimaryKeys())
	return spanner.Delete("Products", spanner.Key(values))
}
